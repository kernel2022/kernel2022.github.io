<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kernel2022.github.io</id>
    <title>贾献华 2022</title>
    <updated>2022-01-03T15:11:16.314Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kernel2022.github.io"/>
    <link rel="self" href="https://kernel2022.github.io/atom.xml"/>
    <subtitle>及时当勉励，岁月不待人。</subtitle>
    <logo>https://kernel2022.github.io/images/avatar.png</logo>
    <icon>https://kernel2022.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 贾献华 2022</rights>
    <entry>
        <title type="html"><![CDATA[《张汉东的 Rust 实战课》学习笔记]]></title>
        <id>https://kernel2022.github.io/post/rust-video/</id>
        <link href="https://kernel2022.github.io/post/rust-video/">
        </link>
        <updated>2022-01-03T09:39:21.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="学习方法">学习方法</h2>
<ol>
<li>从整体出发，不要陷入细节</li>
<li>分层次学习</li>
<li>和已知知识建立联系</li>
<li>源码中学习</li>
<li>主题式阅读</li>
<li>Rust 设计哲学</li>
<li>心智模型</li>
<li>多分享，多提问，多交流</li>
<li>开源项目贡献</li>
<li>《Rust 编程之道》</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<h2 id="学习方法">学习方法</h2>
<ol>
<li>从整体出发，不要陷入细节</li>
<li>分层次学习</li>
<li>和已知知识建立联系</li>
<li>源码中学习</li>
<li>主题式阅读</li>
<li>Rust 设计哲学</li>
<li>心智模型</li>
<li>多分享，多提问，多交流</li>
<li>开源项目贡献</li>
<li>《Rust 编程之道》</li>
</ol>
<!-- more -->
<h3 id="2020年5月15日-rust-稳定版发布-五周年">2020年5月15日 Rust 稳定版发布 五周年</h3>
<p>• 内存安全为第一准则<br>
• 注重并发安全，避免数据竞争<br>
• 持续提升性能<br>
• 保持语言的高度一致性<br>
• 语言必须有可见的实用性<br>
• 注重开发体验和学习体验<br>
• 现代化语言特性<br>
• 拥抱开源社区</p>
<h3 id="rust-是新时代的-c-语言">Rust 是新时代的 C 语言</h3>
<p>• Rust 语言是一门通用型语言。<br>
• Rust 语言的内存安全方案针对的是 C 语言的不足。<br>
• 安全且无缝沟通 C 语言。<br>
• Rust 是具有混合范式的“面向过程”式的编程语言。<br>
• 和 C 语言类似，担负了时代的使命。<br>
<img src="https://kernel2022.github.io/post-images/1641204761152.png" alt="" loading="lazy"></p>
<h3 id="rust-词法结构">Rust 词法结构</h3>
<p>包含六大部分：<br>
• 关键字（Keywords）<br>
• 标识符（Identifier）<br>
• 注释 （Comment）<br>
• 空白（Whitespace）<br>
• 词条（Tokens）<br>
• 路径（Path）<br>
关键字：<br>
• 严格关键字（Strict）</p>
<pre><code class="language-rust">as/ break/ const/ continue/ crate/ if/ else/ struct/ enum/ true/ false/ fn/
for/ in/ let/ loop/ impl/ mod/ match/ move / mut /pub/ ref/ return/ self/
Self/ static/ super/ trait/ type/ unsafe/ use/ where/ while /async/ await/
dyn / main
</code></pre>
<p>• 保留字（Reserved）</p>
<pre><code class="language-rust">abstract/ become/ box/ do/ final/ macro/ override/ priv/ typeof/
unsized/ virtual/ yield / try
</code></pre>
<p>• 弱关键字（Weak）</p>
<ol>
<li>2018 Edition: union, static</li>
<li>2015 Edition: dyn</li>
</ol>
<h3 id="词条">词条</h3>
<ol>
<li>语言项 （item）</li>
<li>块（block）</li>
<li>语句（Stmt）</li>
<li>表达式 （Expr）</li>
<li>模式 （Pattern）</li>
<li>关键字 （Keyword）</li>
<li>标识符 （Ident）</li>
<li>字面量 （Literal）</li>
<li>生命周期 （Lifetime）</li>
<li>可见性 （Vis）</li>
<li>标点符号（Punctuation）</li>
<li>分隔符（delimiter）</li>
<li>词条树（Token Tree）</li>
<li>属性（Attribute）</li>
</ol>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://time.geekbang.org/course/intro/100060601?tab=catalog">极客时间-张汉东的 Rust 实战课</a></li>
<li><a href="https://github.com/ZhangHanDong/inviting-rust">课件及 Demo 下载链接</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rust 入门 快速配置 Rust 开发环境并编写一个小应用！]]></title>
        <id>https://kernel2022.github.io/post/hello-2022/</id>
        <link href="https://kernel2022.github.io/post/hello-2022/">
        </link>
        <updated>2022-01-02T14:00:24.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="安装-rust">安装 Rust</h2>
<p>您可以在 Rust 演练场上在线试用 Rust 而无需在计算机上安装任何东西。<br>
<a href="https://play.rust-lang.org">无需安装，直接尝试 RUST</a></p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="安装-rust">安装 Rust</h2>
<p>您可以在 Rust 演练场上在线试用 Rust 而无需在计算机上安装任何东西。<br>
<a href="https://play.rust-lang.org">无需安装，直接尝试 RUST</a></p>
<!-- more -->
<h3 id="rustuprust安装器和版本管理工具">Rustup：Rust安装器和版本管理工具</h3>
<pre><code class="language-rust">curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source &quot;$HOME/.cargo/env&quot;
</code></pre>
<h2 id="cargorust-的构建工具和包管理器">Cargo：Rust 的构建工具和包管理器</h2>
<p>您在安装 Rustup 时，也会安装 Rust 构建工具和包管理器的最新稳定版，即 Cargo。Cargo 可以做很多事情：</p>
<ul>
<li>cargo build 可以构建项目</li>
<li>cargo run 可以运行项目</li>
<li>cargo test 可以测试项目</li>
<li>cargo doc 可以为项目构建文档</li>
<li>cargo publish 可以将库发布到 crates.io。<br>
要检查您是否安装了 Rust 和 Cargo，可以在终端中运行：<br>
<code>cargo --version</code></li>
</ul>
<h2 id="创建新项目">创建新项目</h2>
<p>我们将在新的 Rust 开发环境中编写一个小应用。首先用 Cargo 创建一个新项目。在您的终端中执行：<br>
<code>cargo new hello-2022</code><br>
这会生成一个名为 hello-rust 的新目录，其中包含以下文件：</p>
<pre><code class="language-shell">hello-rust
|- Cargo.toml
|- src
  |- main.rs
</code></pre>
<p>Cargo.toml 为 Rust 的清单文件。其中包含了项目的元数据和依赖库。<br>
src/main.rs 为编写应用代码的地方。</p>
<pre><code class="language-rust">fn main() {
    println!(&quot;Hello, 2022!&quot;);
}
</code></pre>
<p>cargo new 会生成一个新的“Hello, 2022!”项目！我们可以进入新创建的目录中，执行下面的命令来运行此程序：</p>
<pre><code class="language-shell">println!(&quot;Hello, 2022!&quot;);
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://kernel2022.github.io/post-images/1641133058333.png" alt="" loading="lazy"></figure>
<h2 id="添加依赖">添加依赖</h2>
<p><code>Cargo.toml</code></p>
<pre><code class="language-xml">[dependencies]
ferris-says = &quot;0.2&quot;
</code></pre>
<p>接着运行：<br>
<code>cargo build</code><br>
…之后 Cargo 就会安装该依赖。</p>
<h2 id="一个-rust-小应用">一个 Rust 小应用</h2>
<p><code>main.rs</code></p>
<pre><code class="language-rust">use ferris_says::say; // from the previous step
use std::io::{stdout, BufWriter};

fn main() {
    let stdout = stdout();
    let message = String::from(&quot;Hello, 2022!&quot;);
    let width = message.chars().count();

    let mut writer = BufWriter::new(stdout.lock());
    say(message.as_bytes(), width, &amp;mut writer).unwrap();
}
</code></pre>
<p>保存完毕后，我们可以输入以下命令来运行此应用：<br>
<code>cargo run</code><br>
如果一切正确，您会看到该应用将以下内容打印到了屏幕上：<br>
<img src="https://kernel2022.github.io/post-images/1641134456649.png" alt="" loading="lazy"></p>
<h2 id="这只螃蟹是谁-ferris">这只螃蟹是谁？ Ferris ？</h2>
<p>Ferris 是 Rust 社区的非官方吉祥物。很多 Rust 程序员自称“Rustaceans”， 它与“crustacean”相似。 我们用“they”、“them”等代词，而不用带性别的代词来指代 Ferris。</p>
<p>Ferris 与形容词“ferrous”相似，它的含义与铁有关。由于 Rust（锈）通常由铁形成， 因此它算得上是个吉祥物名字的有趣来源。<br>
<img src="https://kernel2022.github.io/post-images/1641133269085.gif" alt="" loading="lazy"><br>
您可以在 http://rustacean.net/ 上找到更多 Ferris 的图片。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://www.rust-lang.org/zh-CN/learn/get-started">Rust 马上开始</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《Rust 编程第一课》学习笔记]]></title>
        <id>https://kernel2022.github.io/post/rust/</id>
        <link href="https://kernel2022.github.io/post/rust/">
        </link>
        <updated>2022-01-01T15:16:06.000Z</updated>
        <summary type="html"><![CDATA[<p>Happy New Year! 🇨🇳</p>
<h2 id="开篇词让rust成为你的下一门主力语言">开篇词｜让Rust成为你的下一门主力语言</h2>
<p>首先，你使用起来就会感受到，Rust 是一门非常重视开发者用户体验的语言。<br>
其次，众所周知的优异性能和强大的表现力，让 Rust 在很多场合都能够施展拳脚。<br>
<img src="https://kernel2022.github.io/post-images/1641050876780.webp" alt="usage" loading="lazy"><br>
最后，Rust 会越用越享受。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Happy New Year! 🇨🇳</p>
<h2 id="开篇词让rust成为你的下一门主力语言">开篇词｜让Rust成为你的下一门主力语言</h2>
<p>首先，你使用起来就会感受到，Rust 是一门非常重视开发者用户体验的语言。<br>
其次，众所周知的优异性能和强大的表现力，让 Rust 在很多场合都能够施展拳脚。<br>
<img src="https://kernel2022.github.io/post-images/1641050876780.webp" alt="usage" loading="lazy"><br>
最后，Rust 会越用越享受。</p>
<!-- more -->
<h3 id="学习-rust-的难点">学习 Rust 的难点</h3>
<p>Rust 被公认是很难学的语言，学习曲线很陡峭。<br>
所以如果你想从其他语言迁移到 Rust，必须要经过一段时期的思维转换（Paradigm Shift）。<br>
而 Rust 中最大的思维转换就是变量的所有权和生命周期，这是几乎所有编程语言都未曾涉及的领域。</p>
<ul>
<li>C 开发者，难点是类型系统和泛型编程；</li>
<li>C++ 开发者，难点主要在类型系统；</li>
<li>Python/Ruby/JavaScript 开发者，难点在并发处理，类型系统及泛型编程；</li>
<li>Java 开发者，难点在异步处理和并发安全的理解上；</li>
<li>Swift 开发者，几乎没有额外的难点，深入理解 Rust 异步处理即可。</li>
</ul>
<h3 id="如何学好-rust">如何学好 Rust？</h3>
<ul>
<li>精准学习</li>
<li>刻意练习<br>
<img src="https://kernel2022.github.io/post-images/1641051228336.webp" alt="practise" loading="lazy"></li>
</ul>
<h2 id="前置篇-3讲">前置篇 (3讲)</h2>
<h3 id="01内存值放堆上还是放栈上这是一个问题">01｜内存：值放堆上还是放栈上，这是一个问题</h3>
<p><code>let s = &quot;hello world&quot;.to_string();</code><br>
<img src="https://kernel2022.github.io/post-images/1641052903619.jpg" alt="" loading="lazy"></p>
<h4 id="栈">栈</h4>
<p>栈是程序运行的基础。每当一个函数被调用时，一块连续的内存就会在栈顶被分配出来，这块内存被称为帧（frame）。<br>
<img src="https://kernel2022.github.io/post-images/1641052963568.webp" alt="" loading="lazy"></p>
<h4 id="堆">堆</h4>
<p>栈虽然使用起来很高效，但它的局限也显而易见。当我们需要动态大小的内存时，只能使用堆，比如可变长度的数组、列表、哈希表、字典，它们都分配在堆上。<br>
<img src="https://kernel2022.github.io/post-images/1641053000641.webp" alt="" loading="lazy"></p>
<ul>
<li>栈上存放的数据是静态的，固定大小，固定生命周期；</li>
<li>堆上存放的数据是动态的，不固定大小，不固定生命周期。</li>
</ul>
<h3 id="02串讲编程开发中那些你需要掌握的基本概念">02｜串讲：编程开发中，那些你需要掌握的基本概念</h3>
<p><img src="https://kernel2022.github.io/post-images/1641200800553.webp" alt="" loading="lazy"><br>
原生类型（primitive type）是编程语言提供的最基础的数据类型。</p>
<ul>
<li>所有原生类型的大小都是固定的，因此它们可以被分配到栈上。<br>
组合类型（composite type）或者说复合类型，是指由一组原生类型和其它类型组合而成的类型。</li>
<li>结构体（structure type）：多个类型组合在一起共同表达一个值的复杂数据结构。比如 Person 结构体，内部包含 name、age、email 等信息。用代数数据类型（algebraic data type）的说法，结构体是 product type。</li>
<li>标签联合（tagged union）：也叫不相交并集（disjoint union），可以存储一组不同但固定的类型中的某个类型的对象，具体是哪个类型由其标签决定。比如 Haskell 里的 Maybe 类型，或者 Swift 中的 Optional 就是标签联合。用代数数据类型的说法，标签联合是 sum type。</li>
</ul>
<h4 id="函数-方法和闭包">函数、方法和闭包</h4>
<figure data-type="image" tabindex="1"><img src="https://kernel2022.github.io/post-images/1641201303031.webp" alt="" loading="lazy"></figure>
<h4 id="接口和虚表">接口和虚表</h4>
<p>接口是一个软件系统开发的核心部分，它反映了系统的设计者对系统的抽象理解。作为一个抽象层，接口将使用方和实现方隔离开来，使两者不直接有依赖关系，大大提高了复用性和扩展性。<br>
<img src="https://kernel2022.github.io/post-images/1641201743758.jpg" alt="" loading="lazy"></p>
<h4 id="并发concurrency与并行parallel">并发（concurrency）与并行（parallel）</h4>
<figure data-type="image" tabindex="2"><img src="https://kernel2022.github.io/post-images/1641201684132.jpg" alt="" loading="lazy"></figure>
<h4 id="同步和异步">同步和异步</h4>
<p>对比了 CPU、内存、I/O 设备、和网络的延迟<br>
<img src="https://kernel2022.github.io/post-images/1641202009360.webp" alt="" loading="lazy"></p>
<h3 id="代码缺陷">代码缺陷</h3>
<p><img src="https://kernel2022.github.io/post-images/1641202447002.webp" alt="" loading="lazy"><br>
<img src="https://kernel2022.github.io/post-images/1641202558503.webp" alt="" loading="lazy"><br>
参考资料</p>
<ol>
<li>配合课程使用：官方的 Rust book、微软推出的一系列 Rust 培训 Beginner’s Series to: Rust、英文书 Programming Rust 查漏补缺</li>
<li>学完课程后进阶学习：官方的 Rust 死灵书（The Rustonomicon）、每月一期的 Rust 语言开源杂志、 Jon Gjengset 的 YouTube 频道、张汉东的《Rust 编程之道》、我的 B 站上的“程序君的 Rust 培训”系列。</li>
<li>学有余力的练习：Rust 代码的文档系统 docs.rs 、小练习 rustlings</li>
<li>社区动态：博客 This week in Rust 、公众号 Rust 语言中文社区、 公众号 Rust 碎碎念</li>
</ol>
<h2 id="基础篇-21讲">基础篇 (21讲)</h2>
<h2 id="期中周-2讲">期中周 (2讲)</h2>
<h2 id="进阶篇-11讲">进阶篇 (11讲)</h2>
<h2 id="并发篇-11讲">并发篇 (11讲)</h2>
<h2 id="实战篇-7讲">实战篇 (7讲)</h2>
<h2 id="结束语-2讲">结束语 (2讲)</h2>
<h2 id="参考">参考：</h2>
<ul>
<li><a href="https://time.geekbang.org/column/article/408400">陈天 · Rust 编程第一课</a></li>
<li><a href="https://github.com/tyrchen/geektime-rust">GitHub</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://kernel2022.github.io/post/hello-gridea/</id>
        <link href="https://kernel2022.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>